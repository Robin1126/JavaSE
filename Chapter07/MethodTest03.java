/*
	1. 方法怎么定义，语法机制是什么？
		格式：
		[修饰符列表] 返回值类型 方法名(形式参数列表) {
			方法体;
		}
		
		main {
			找一个变量 数据类型 变量 = a(); //谁调用了就返回给谁，如果不是void就要在main中一个变量来接收结果
		}
		注意：中括号里面的不是必须的，可选的

		1.1 修饰符列表不是必选，是可选的。目前统一写成 public static 后面你就理解怎么写了

		1.2 返回值类型：
			第一：返回值类型可以是Java中任何合法的数据类型，byte short long...

			第二：什么是返回值？
					一个方法执行之后的结果。通常是一个数据，称为一个值，所以叫返回值。
					方法就是完成一个特定的功能，而体现结果的一般都是数据。数据得有类型。

			第三：当一个方法执行结束不返回任何值的时候，返回值类型也不能空白，必须写上void
					所以给void表示刚方法结束后补返回任何结果

			第四：如果返回值类型不是void，那么你在方法体执行结束之后必须使用return来返回
					如 return a;否则编译器会报错
						
			第五：return 值; 只要有return关键字的执行，当前方法必然结束。
			
			第六：如果返回值是void，那么方法体当中不能有return 值;这样的语句，但是可以有return;
					这个return的作用就是中止当前方法的。
					一句话就是前后要一致！

			第七：除了void以外，剩下的都必须有return 值; 只是当前方法中止，不是整个结束
		
		1.3 方法名
			方法名要见名知意
			命名规范：首字母小写，后面每个字母大写 如sumInt 驼峰命名方式

		1.4 形式参数列表
			简称：形参
			注意：形式参数列表中的每一个参数都是局部变量，方法结束之后释放内存
			形参个数是 0—N个
			public static void sumInt() {}
			public static void sumInt(int x, int y) {}

			有多个形参用逗号隔开，逗号是英文的。
			形参的数据类型起决定性作用，形参对应的变量名是随意的。

		1.5 方法体：
			由Java语句构成，Java语句以;结尾
			方法体中编写的是业务逻辑代码，完成某个特定功能
			代码是从上而下依次执行。
			方法体中处理业务逻辑代码的时候需要数据，数据来源就是这些形参。
		
		2. 方法定义之后怎么调用呢？
			方法要定义才能调用执行。
			怎么调用？
				类名.方法名（形参）;

			实参和形参的类型必须一一对应，另外个数也要一一对应

			
*/


public class MethodTest03 {
	public static void main(String[] args) {
		//main方法结束之后不需要返回给JVM任何结果
		MethodTest03.divide(3,1); //调用时先写类名，再写方法名
		//int sum = MethodTest03.sumInt(6,7);

		//可以用double，double是大容量,完全没有问题
		//同样小容量的实参可以传到大容量的形参，同样还是小容量转换成大容量
		double sum = MethodTest03.sumInt(6,7);

		MethodTest03.sumInt(11,11);//返回值可以不接受，不过没有意义

		System.out.println(sum);
		//注意原材料传进去的时候要匹配
		//(3,1)叫做实际参数列表，简称实参

	}
		//方法定义在这里也可以，没有顺序之分
		//业务：计算两个整数的和
		//返回执行结果是int

		public static void divide(int x, int y) {
			int z = x / y;
			System.out.println(z); //也可以直接return x / y;
		}

		//方法：计算两个数据类型的和
		public static int sumInt(int x, int y){
			return x + y;
		}
		//如果想返回多个值，可以放在一个容器例如数组当中再返回
		//但是不能返回x+y,c+d这样多个

		//要磨练自己提取方法的意识
	
}