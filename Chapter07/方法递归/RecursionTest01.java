/*
	方法的递归
	1. 什么是方法的递归？
		方法自己调用自己就是递归
	2. 当递归程序没有结束条件，一定会发生栈内存溢出错误
		所以：递归必须要有结束条件
	3. 递归假设有结束条件，就一定不会发生错误呢?
		递归得太深了，导致递归的空间不够了
	4. 递归不建议轻易使用，能用for while尽量使用循环来代替，因为循环耗费的内存小
		另外 递归的内存比较大，使用不当会导致JVM死掉
		但某些程序只能使用递归来实现
		所以递归还是要认真学习的。
	
	5. 假设有一天真的遇到了内存溢出，怎么解决呢？
		第一步：先检查递归的结束条件有没有问题。如果不对，修改条件
		第二步：如果条件没有问题，这个时候手动调整JVM的栈内存初始化大小，将它调大。
		第三步：调整了大小还是不行，那只能继续扩大栈内存的初始化大小
		参数 Java -Xss
		java -x 可以查看调整堆栈大小的参数
*/

public class RecursionTest01
{
	public static void main(String[] args) {
		doSome();
	}

	public static void doSome() {
		System.out.println("doSome begin");
		//方法自己调用自己
		doSome();
		System.out.println("doSome over");//这行方法就永远执行不到，这个也没有压栈处理,每个栈元素都卡住了doSome()
		//一直压栈push没有pop随后会导致内存溢出
		
	}
}