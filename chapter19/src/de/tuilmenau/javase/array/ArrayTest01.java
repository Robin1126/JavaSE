/*
Array
    1. Java语言中的数组是一种引用数据类型，不属于基本数据类型。数组的父类是Object
    2. 什么是数组？
        数组实际上是一个容器，可以同时容纳多个元素。比如一袋苹果
        数组字面意思是：一组数据
    3. 数组当中可以存储基本数据类型，也可以存储引用数据类型。
    4. 数组因为是引用数据类型，所以存在内存的堆内存当中 （堆：heap）
    5. 数组在内存方面是怎么样的一个形式？
        数组也分类，比如 1，10，4，9，20 这么一串数组
    6. 如果这个数组存的是对象，那么就相当于数组的每个栏位都存了一个对象的地址，指向该地址的对象，不能直接存储Java对象
        数组在Java中规定，一旦创建，长度不可变
    7. 数组的分类，一维数组，二维数组，三维数组，多维数组。。。主要用一维数组，二位数组偶尔使用
    8. 所有的数组都由length属性（Java自带的），用来获取数组中元素的个数
    9. java中的数组要求数组中的元素类型统一。比如int类型数组只能存储int类型，Person类型数组只能存Person类型
    10.数组在内存方面存储的时候，数组中的元素内存地址是连续的，一串在一起的，有规则的挨着排列的。这是数组存储元素的特点，实际上是一种简单的数据结构。
    11.所有的数组都是拿第一个小方框的内存地址作为整个数组对象的内存地址。排头兵~ 如array1 = 0x11; 0x11指向第一个数组
    12.数组中每一个元素都有下标，从0开始到最后一个元素下标是length-1。下标非常重要，数据的存取都是以下标为基础的
    13.数组的优点和缺点？
        优点：查找检索某个下标的元素时，效率极高。
        为什么效率高？
            第一：每个元素内存地址在空间上连续
            第二：每一个元素的类型相同，所以所占的空间大小一样
            第三；知道第一个元素内存地址，又知道下标，就可以算出某个下标上元素的内存地址，直接通过地址定位元素。

            数组中存100个和100万个元素在检索方面的效率时相同的，不会一个个找，是通过数学表达式计算出来的，直接定位。

        缺点：
            第一：由于为了保证数组中每个元素的地址连续，所以在数组上随机增加或者删除元素的时候效率较低。因为设计了后面元素移动的操作
            第二：数组不能存储大数据量，因为很难在内存空间上找到一大块连续的空闲空间

       注意：对数组最后的元素进行增删是没有影响的
     14.怎么声明一个一维数组？
        int[] array1; double[] array2; String[] array3; Object[] array4;
     15.初始化一个一维数组
        静态初始化：
            int[] array = {100,200,300};
        动态初始化：
            int[] array = new int[5]; 初始化一个长度为5的int数组，每个元素的默认值为0
            String[] array = new String[6]; 初始化一个长度为6的String数组，每个元素的默认值为null

*/
package de.tuilmenau.javase.array;


public class ArrayTest01 {
    public static void main(String[] args) {
        //静态初始化一个int类型数组
        int[] array1 = {1, 100, 200, 300, 5, 589};
        //c++风格也可以 int a[] = {1, 2, 3, 4, 5};
        System.out.println("数组中元素的个数是：" + array1.length);

        //每一个元素都有下标
        //通过下标存取元素
        //读
        System.out.println("第一个元素是：" + array1[0]);
        System.out.println("最后一个元素是：" +array1[array1.length-1]);
        //改
        array1[0] = 111;
        array1[array1.length-1] = 0;
        System.out.println("第一个元素是：" + array1[0]);
        System.out.println("最后一个元素是：" +array1[array1.length-1]);

        //遍历数组
        for (int i = 0; i < array1.length; i++) {
            System.out.print(array1[i] + " ");
        }
        //System.out.println(array1[6]);
        //ArrayIndexOutOfBoundsException 比较著名的异常，下标越界异常
        System.out.println();
        //从最后一个元素遍历到第一个元素
        for (int i = array1.length - 1; i >= 0; i--) {
            System.out.print(array1[i] + " ");
        }
    }
}
