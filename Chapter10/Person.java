/*
	Person表示人类
		每一个人都有年龄，int类型

	我们先不使用封装，看看程序的缺点
*/

/*public class Person {
	//实例变量
	int age;
}*/

/*
	尝试封装一下，不在对外暴露数据，而是提供简单的操作入口
	优点：第一数据安全了。第二调用者也方便了
*/

public class Person {
	//private表示私有的，被这个关键字修饰以后，该数据只能在本类中访问
	//出了这个类就不能访问了，age属性是私有的
	private int age; 

	//对外提供简单的访问入口，外部程序只能通过调用以下的代码访问
	//思考：应该提供几个入口?
	//这些入口是否应该是方法？
	//get方法完成读
	//set方法完成写
	//set get方法应该是定义称为实例方法，读和改都是操作一个对象的年龄

	//封装的第二步是对外提供公开的set方法和get方法作为操作入口，并且都不带static，作为实例方法

	/*
	[修饰符列表] 返回值类型 方法名 （形式参数列表）{方法体；}
	*/

	//get方法
	public int getAge() { //无static，和对象有关
		return age;
	}
	//set方法
	//我们可以在这个位置上设置关卡
	public void setAge(int x) {
		if (x < 0 || x > 150)
		{
			System.out.println("对不起，年龄非法！");
			return;
		}
		//程序能执行到这里说明年龄是合法的
		age = x;
	}
}

//JavaSE中最难的是面向对象

/*
	注意：
	Java开发规范中有要求，set方法和get方法满足以下格式
	public 返回值类型 get+属性名首字母大写(无参数) { }
	public 返回值类型 set+属性名首字母大写（有一个参数）{ xxx = 参数；}

	尽量按照规范提供set和get方法，以后的开发方式有默认的模板
*/